/*
 * Generated by NJS
 * 
 * NJS is licensed under the LGPLv3
 * You must use a compatible license
 */

import net.nexustools.njs.compiler.CompiledScript;
import net.nexustools.njs.compiler.CompiledFunction;
import net.nexustools.njs.BaseObject;
import net.nexustools.njs.GenericObject;
import net.nexustools.njs.GenericArray;
import net.nexustools.njs.Arguments;
import net.nexustools.njs.BaseFunction;
import net.nexustools.njs.Undefined;
import net.nexustools.njs.JSHelper;
import net.nexustools.njs.Global;
import net.nexustools.njs.Scope;
import net.nexustools.njs.Null;

import java.util.Iterator;


@SuppressWarnings("all")
public final class primes extends CompiledScript.Debuggable{
	@Override
	public String source() {
		return "var Assert = importClass(\"org.junit.Assert\");\nvar System = importClass(\"java.lang.System\");\n\nvar start = +new Date;\nfunction getPrimes(x){\n  var ar = [];\n  for (var counter = 0; counter <= x; counter++) {\n      var notPrime = false;\n      for (var i = 2; (i <= ar.length) && !notPrime; i++) {\n          if (counter%ar[i]===0)\n              notPrime = true;\n      }\n      if (notPrime === false) ar.push(counter);\n  }\n  return ar;\n}\n\nvar primes = getPrimes(100);\nSystem.out.println(primes.length);\nAssert.assertTrue(primes.length === 27);\nSystem.out.println((+new Date) - start + \"ms\");";
	}
	@Override
	@SuppressWarnings("all")
	public BaseObject exec(Global global, Scope scope) {
		if(scope == null)
			scope = new Scope(global);
		final Scope baseScope = scope;
		baseScope.var("getPrimes", new getPrimes(global, baseScope));
		final JSHelper.ReplacementStackTraceElement stackElement = JSHelper.renameCall("", "test/tests/math/ops/primes.js", 1, 1);
		baseScope.enter();
		try {
			baseScope.var("Assert", callTop("importClass", baseScope.get("importClass"), Undefined.INSTANCE, global.wrap("org.junit.Assert")));
			stackElement.rows = 2;
			stackElement.columns = 1;
			baseScope.var("System", callTop("importClass", baseScope.get("importClass"), Undefined.INSTANCE, global.wrap("java.lang.System")));
			stackElement.rows = 4;
			stackElement.columns = 1;
			baseScope.var("start", global.Zero.plus(global.Number.fromValueOf(constructTop("Date", baseScope.get("Date")))));
			stackElement.rows = 18;
			stackElement.columns = 1;
			baseScope.var("primes", callTop("getPrimes", baseScope.get("getPrimes"), Undefined.INSTANCE, global.wrap(100)));
			stackElement.rows = 19;
			stackElement.columns = 19;
			callTop("System.out.println", "println", baseScope.get("System").get("out"), baseScope.get("primes").get("length"));
			stackElement.rows = 20;
			stackElement.columns = 18;
			callTop("Assert.assertTrue", "assertTrue", baseScope.get("Assert"), (((BaseObject)baseScope.get("primes").get("length") == (BaseObject)global.wrap(27)) ? global.Boolean.TRUE : global.Boolean.FALSE));
			stackElement.rows = 21;
			stackElement.columns = 19;
			return callTop("System.out.println", "println", baseScope.get("System").get("out"), global.wrap(minus(global, global.Zero.plus(global.Number.fromValueOf(constructTop("Date", baseScope.get("Date")))), baseScope.get("start")) + "ms"));
		} finally {
			baseScope.exit();
			stackElement.finishCall();
		}
	}
	private static final class getPrimes extends CompiledFunction {
		private final Scope baseScope;
		Scope extendScope(BaseObject _this) {
			return baseScope.extend(_this);
		}
		private getPrimes(Global global, Scope scope) {
			super(global);
			baseScope = scope;
		}
		@Override
		public String source() {
			return "\n  var ar = [];\n  for (var counter = 0; counter <= x; counter++) {\n      var notPrime = false;\n      for (var i = 2; (i <= ar.length) && !notPrime; i++) {\n          if (counter%ar[i]===0)\n              notPrime = true;\n      }\n      if (notPrime === false) ar.push(counter);\n  }\n  return ar;\n";
		}
		@Override
		public String name() {
			return "getPrimes";
		}
		@Override
		@SuppressWarnings("all")
		public BaseObject call(BaseObject _this, BaseObject... params) {
			final Scope baseScope = extendScope(_this);
			baseScope.var("arguments", new Arguments(global, this, params));
			switch(params.length) {
				case 0:
					baseScope.var("x", Undefined.INSTANCE);
					break;
				default:
					baseScope.var("x", params[0]);
					break;
			}
			final JSHelper.ReplacementStackTraceElement stackElement = JSHelper.renameCall("getPrimes", "test/tests/math/ops/primes.js", 6, 3);
			baseScope.enter();
			try {
				baseScope.var("ar", new GenericArray(global, new BaseObject[]{}));
				stackElement.rows = 7;
				stackElement.columns = 3;
				baseScope.var("counter", global.Zero);
				for(; lessEqual(global, baseScope.get("counter"), baseScope.get("x")); plusPlusRight(global, "counter", baseScope)) {
					stackElement.rows = 8;
					stackElement.columns = 7;
					baseScope.var("notPrime", global.Boolean.FALSE);
					stackElement.rows = 9;
					stackElement.columns = 7;
					baseScope.var("i", global.wrap(2));
					for(; lessEqual(global, baseScope.get("i"), baseScope.get("ar").get("length")) && !baseScope.get("notPrime").toBool(); plusPlusRight(global, "i", baseScope)) {
						stackElement.rows = 10;
						stackElement.columns = 11;
						if((BaseObject)percent(global, baseScope.get("counter"), JSHelper.get(baseScope.get("ar"), baseScope.get("i"))) == (BaseObject)global.Zero)
							callSet(baseScope, "notPrime", global.Boolean.TRUE)
						;
					};
					stackElement.rows = 13;
					stackElement.columns = 7;
					if((BaseObject)baseScope.get("notPrime") == (BaseObject)global.Boolean.FALSE)
						callTop("ar.push", "push", baseScope.get("ar"), baseScope.get("counter"))
					;
				};
				stackElement.rows = 15;
				stackElement.columns = 3;
				return baseScope.get("ar");
			} finally {
				baseScope.exit();
				stackElement.finishCall();
			}
		}
	}
}
